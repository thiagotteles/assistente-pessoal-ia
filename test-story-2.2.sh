#!/bin/bash

# Test Suite para Story 2.2 - Agente Secret√°ria Executiva Completa
# Valida implementa√ß√£o de todos os crit√©rios de aceita√ß√£o

set -e

# Cores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Contadores
TESTS_RUN=0
TESTS_PASSED=0
TESTS_FAILED=0

# Fun√ß√£o para logging
log() {
    echo -e "${BLUE}[TEST]${NC} $1"
}

success() {
    echo -e "${GREEN}[‚úì PASS]${NC} $1"
    ((TESTS_PASSED++))
}

fail() {
    echo -e "${RED}[‚úó FAIL]${NC} $1"
    ((TESTS_FAILED++))
}

warn() {
    echo -e "${YELLOW}[‚ö† WARN]${NC} $1"
}

run_test() {
    ((TESTS_RUN++))
    echo -e "${BLUE}[TEST $TESTS_RUN]${NC} $1"
}

# Fun√ß√£o para verificar se arquivo existe e tem conte√∫do
check_file_exists() {
    local file="$1"
    local description="$2"

    if [ -f "$file" ]; then
        if [ -s "$file" ]; then
            success "Arquivo $description existe e tem conte√∫do: $file"
            return 0
        else
            fail "Arquivo $description existe mas est√° vazio: $file"
            return 1
        fi
    else
        fail "Arquivo $description n√£o encontrado: $file"
        return 1
    fi
}

# Fun√ß√£o para verificar conte√∫do espec√≠fico em arquivo
check_file_content() {
    local file="$1"
    local pattern="$2"
    local description="$3"

    if [ -f "$file" ]; then
        if grep -q "$pattern" "$file"; then
            success "$description: padr√£o '$pattern' encontrado em $file"
            return 0
        else
            fail "$description: padr√£o '$pattern' N√ÉO encontrado em $file"
            return 1
        fi
    else
        fail "$description: arquivo $file n√£o existe"
        return 1
    fi
}

echo "=================================================================="
echo "üß™ TESTE DA STORY 2.2 - SECRET√ÅRIA EXECUTIVA DIGITAL"
echo "=================================================================="
echo

# TESTE 1: Configura√ß√£o Base do Agente (AC1)
echo "üìã BLOCO 1: CONFIGURA√á√ÉO BASE DO AGENTE SECRET√ÅRIA"
echo "--------------------------------------------------"

run_test "Verificar arquivo de configura√ß√£o YAML da secret√°ria"
check_file_exists ".assistant-core/agents/secretaria.yaml" "configura√ß√£o YAML"

run_test "Verificar arquivo de agente conversacional da secret√°ria"
check_file_exists ".assistant-core/agents/secretaria.md" "agente conversacional"

run_test "Verificar configura√ß√£o de personalidade executiva"
check_file_content ".assistant-core/agents/secretaria.yaml" "executiva-eficiente" "personalidade executiva"

run_test "Verificar sistema de mem√≥ria contextual"
check_file_exists ".assistant-core/memory/secretaria-memory.yaml" "mem√≥ria contextual"

run_test "Verificar template de reuni√£o expandido"
check_file_exists ".assistant-core/templates/reuniao-resumo.yaml" "template de reuni√£o"
check_file_content ".assistant-core/templates/reuniao-resumo.yaml" "version.*2.0" "vers√£o atualizada do template"

echo

# TESTE 2: Dashboard Executivo e Tasks (AC1, AC2)
echo "üìä BLOCO 2: DASHBOARD EXECUTIVO E STATUS DE PROJETOS"
echo "----------------------------------------------------"

run_test "Verificar task de agenda do dia"
check_file_exists ".assistant-core/tasks/agenda-do-dia.md" "task agenda do dia"

run_test "Verificar task de status de projetos"
check_file_exists ".assistant-core/tasks/status-projetos.md" "task status projetos"

run_test "Verificar integra√ß√£o com arquivos projeto-*.md"
check_file_content ".assistant-core/tasks/agenda-do-dia.md" "projeto-\*.md" "leitura de arquivos projeto"

run_test "Verificar detec√ß√£o de projetos sem atividade"
check_file_content ".assistant-core/tasks/status-projetos.md" "atividade.*dias" "detec√ß√£o inatividade"

run_test "Verificar alertas sobre deadlines"
check_file_content ".assistant-core/tasks/agenda-do-dia.md" "deadline\|prazo" "alertas de prazo"

echo

# TESTE 3: Sistema de Registro de Reuni√µes (AC3)
echo "ü§ù BLOCO 3: SISTEMA DE REGISTRO DE REUNI√ïES"
echo "-------------------------------------------"

run_test "Verificar task de registro de reuni√£o"
check_file_exists ".assistant-core/tasks/registro-reuniao.md" "task registro reuni√£o"

run_test "Verificar parsing de texto livre"
check_file_content ".assistant-core/tasks/registro-reuniao.md" "texto livre\|transcri√ß√£o" "parsing texto livre"

run_test "Verificar extra√ß√£o autom√°tica de todos"
check_file_content ".assistant-core/tasks/registro-reuniao.md" "todos.*extrair" "extra√ß√£o de todos"

run_test "Verificar identifica√ß√£o de participantes [[]]"
check_file_content ".assistant-core/tasks/registro-reuniao.md" "\[\[pessoa-" "identifica√ß√£o participantes"

run_test "Verificar integra√ß√£o com arquivos √∫nicos pessoa-*.md"
check_file_content ".assistant-core/tasks/registro-reuniao.md" "pessoa-\*.md" "integra√ß√£o pessoa √∫nicos"

echo

# TESTE 4: Funcionalidades What's Next (AC4)
echo "üéØ BLOCO 4: FUNCIONALIDADES WHAT'S NEXT E PRIORIZA√á√ÉO"
echo "-----------------------------------------------------"

run_test "Verificar task What's Next"
check_file_exists ".assistant-core/tasks/whats-next.md" "task What's Next"

run_test "Verificar algoritmo de prioriza√ß√£o"
check_file_content ".assistant-core/tasks/whats-next.md" "matriz.*2x2\|urg√™ncia.*impacto" "matriz prioriza√ß√£o"

run_test "Verificar detec√ß√£o de sobrecarga"
check_file_content ".assistant-core/tasks/whats-next.md" "sobrecarga" "detec√ß√£o sobrecarga"

run_test "Verificar integra√ß√£o com central-todos.md"
check_file_content ".assistant-core/tasks/whats-next.md" "central-todos.md" "integra√ß√£o central todos"

echo

# TESTE 5: Processamento de Calend√°rio (AC5)
echo "üìÖ BLOCO 5: PROCESSAMENTO DE CALEND√ÅRIO VIA TEXTO"
echo "-------------------------------------------------"

run_test "Verificar task de processamento de calend√°rio"
check_file_exists ".assistant-core/tasks/processar-calendario.md" "task calend√°rio"

run_test "Verificar parser de datas em portugu√™s"
check_file_content ".assistant-core/tasks/processar-calendario.md" "portugu√™s\|15.*mar√ßo\|amanh√£" "parser portugu√™s"

run_test "Verificar detec√ß√£o de conflitos"
check_file_content ".assistant-core/tasks/processar-calendario.md" "conflito" "detec√ß√£o conflitos"

run_test "Verificar suporte a eventos recorrentes"
check_file_content ".assistant-core/tasks/processar-calendario.md" "recorrente\|toda.*segunda" "eventos recorrentes"

echo

# TESTE 6: Relat√≥rios Executivos (AC6)
echo "üìà BLOCO 6: RELAT√ìRIOS EXECUTIVOS AUTOM√ÅTICOS"
echo "---------------------------------------------"

run_test "Verificar task de relat√≥rio executivo"
check_file_exists ".assistant-core/tasks/relatorio-executivo.md" "task relat√≥rio"

run_test "Verificar gera√ß√£o sob demanda"
check_file_content ".assistant-core/tasks/relatorio-executivo.md" "sob demanda" "gera√ß√£o sob demanda"

run_test "Verificar an√°lise de padr√µes"
check_file_content ".assistant-core/tasks/relatorio-executivo.md" "padr√£o" "an√°lise padr√µes"

run_test "Verificar recomenda√ß√µes autom√°ticas"
check_file_content ".assistant-core/tasks/relatorio-executivo.md" "recomenda√ß√µes" "recomenda√ß√µes autom√°ticas"

echo

# TESTE 7: Integra√ß√£o Geral e Compatibilidade
echo "üîó BLOCO 7: INTEGRA√á√ÉO E COMPATIBILIDADE"
echo "----------------------------------------"

run_test "Verificar compatibilidade com arquivos √∫nicos"
projects_count=$(ls knowledge-base/projetos/projeto-*.md 2>/dev/null | wc -l || echo 0)
if [ $projects_count -gt 0 ]; then
    success "Encontrados $projects_count arquivos de projeto √∫nicos compat√≠veis"
else
    fail "Nenhum arquivo projeto-*.md encontrado para testar compatibilidade"
fi

run_test "Verificar integra√ß√£o com Knowledge-Base Manager"
if grep -q "knowledge-base.*manager\|Knowledge-Base Manager" .assistant-core/tasks/*.md; then
    success "Refer√™ncias ao Knowledge-Base Manager encontradas nas tasks"
else
    fail "Nenhuma refer√™ncia ao Knowledge-Base Manager encontrada"
fi

run_test "Verificar cross-referencing autom√°tico"
ref_count=$(grep -c "\[\[pessoa-\|\[\[projeto-" .assistant-core/tasks/*.md 2>/dev/null || echo 0)
if [ $ref_count -gt 5 ]; then
    success "Cross-referencing autom√°tico implementado ($ref_count refer√™ncias)"
else
    fail "Insuficientes refer√™ncias [[]] autom√°ticas encontradas ($ref_count)"
fi

echo

# TESTE 8: Performance e TDAH
echo "‚ö° BLOCO 8: PERFORMANCE E OTIMIZA√á√ïES TDAH"
echo "------------------------------------------"

run_test "Verificar requisitos de performance TDAH"
tdah_count=$(grep -c "TDAH\|3 segundos\|3s\|overwhelm" .assistant-core/tasks/*.md .assistant-core/agents/secretaria.* 2>/dev/null || echo 0)
if [ $tdah_count -gt 3 ]; then
    success "Otimiza√ß√µes TDAH implementadas ($tdah_count men√ß√µes)"
else
    fail "Insuficientes otimiza√ß√µes TDAH ($tdah_count men√ß√µes)"
fi

run_test "Verificar feedback de progresso visual"
if grep -q "visual\|feedback\|progress" .assistant-core/tasks/*.md; then
    success "Feedback visual implementado"
else
    warn "Feedback visual pode estar limitado"
fi

echo

# TESTE 9: Estrutura de Comandos do Agente
echo "ü§ñ BLOCO 9: ESTRUTURA DE COMANDOS DO AGENTE"
echo "-------------------------------------------"

run_test "Verificar comandos dispon√≠veis na secret√°ria"
commands_count=$(grep -c "- help:\|- agenda:\|- projetos:\|- reuniao:\|- proximos:\|- calendario:\|- relatorio:" .assistant-core/agents/secretaria.md 2>/dev/null || echo 0)
if [ $commands_count -ge 6 ]; then
    success "Comandos da secret√°ria implementados ($commands_count comandos)"
else
    fail "Comandos insuficientes implementados ($commands_count de 7 esperados)"
fi

run_test "Verificar defini√ß√£o de persona Beatriz"
if grep -q "name.*Beatriz\|Secret√°ria.*Executiva" .assistant-core/agents/secretaria.md; then
    success "Persona Beatriz definida corretamente"
else
    fail "Persona Beatriz n√£o encontrada na defini√ß√£o"
fi

echo

# TESTE 10: Valida√ß√£o Final de Integra√ß√£o
echo "‚úÖ BLOCO 10: VALIDA√á√ÉO FINAL"
echo "----------------------------"

run_test "Verificar atualiza√ß√£o do script de deploy"
if [ -f "scripts/deploy-assistant.sh" ]; then
    if grep -q "secretaria\|Secret√°ria" scripts/deploy-assistant.sh; then
        success "Script de deploy atualizado com secret√°ria"
    else
        warn "Script de deploy pode precisar de atualiza√ß√£o para incluir secret√°ria"
    fi
else
    fail "Script de deploy n√£o encontrado"
fi

run_test "Verificar integridade geral do sistema"
if [ -d ".assistant-core/agents" ] && [ -d ".assistant-core/tasks" ] && [ -d ".assistant-core/templates" ]; then
    success "Estrutura b√°sica do sistema √≠ntegra"
else
    fail "Estrutura b√°sica do sistema comprometida"
fi

echo
echo "=================================================================="
echo "üìä RELAT√ìRIO FINAL DOS TESTES"
echo "=================================================================="
echo
echo "Total de Testes Executados: $TESTS_RUN"
echo -e "${GREEN}Testes Aprovados: $TESTS_PASSED${NC}"
echo -e "${RED}Testes Falhados: $TESTS_FAILED${NC}"
echo

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ TODOS OS TESTES PASSARAM! Story 2.2 implementada com sucesso!${NC}"
    exit 0
else
    echo -e "${RED}‚ùå ALGUNS TESTES FALHARAM. Revisar implementa√ß√£o necess√°ria.${NC}"
    echo
    echo "Resumo dos problemas encontrados:"
    echo "- $TESTS_FAILED teste(s) falharam de $TESTS_RUN executados"
    echo "- Taxa de sucesso: $((TESTS_PASSED * 100 / TESTS_RUN))%"
    exit 1
fi