#!/bin/bash
# test-story-3.1.sh - Testes para Story 3.1 (Onboarding Interativo - Primeiros Passos)
# Sistema: Assistente Pessoal IA

set -e

# Cores
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

TESTS_PASSED=0
TESTS_FAILED=0

info() { echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"; }
success() { echo -e "${GREEN}‚úÖ $1${NC}"; ((TESTS_PASSED++)); }
fail() { echo -e "${RED}‚ùå $1${NC}"; ((TESTS_FAILED++)); }
warning() { echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"; }

echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "  Testes Story 3.1 - Onboarding Interativo"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""

# ============================================
# TESTE 1: Arquivo daily-dump.md com Exemplos
# ============================================
info "Teste 1: Verificando daily-dump.md com exemplos pr√°ticos (AC2)..."

if [ -f "despejo/daily-dump.md" ]; then
    success "daily-dump.md existe"

    if grep -q "Exemplo de como usar" "despejo/daily-dump.md"; then
        success "Cont√©m se√ß√£o de exemplos"
    else
        fail "N√ÉO cont√©m se√ß√£o de exemplos"
    fi

    if grep -q "reuni√£o com Jo√£o" "despejo/daily-dump.md" || grep -q "projeto Alpha" "despejo/daily-dump.md"; then
        success "Cont√©m exemplos pr√°ticos"
    else
        fail "N√ÉO cont√©m exemplos pr√°ticos suficientes"
    fi

    if grep -q "Seu despejo come√ßa aqui" "despejo/daily-dump.md"; then
        success "Cont√©m se√ß√£o para usu√°rio escrever"
    else
        fail "N√ÉO cont√©m se√ß√£o para usu√°rio"
    fi
else
    fail "daily-dump.md N√ÉO encontrado"
fi

# ============================================
# TESTE 2: BEM-VINDO.md Completo
# ============================================
info "Teste 2: Verificando BEM-VINDO.md (AC2)..."

# BEM-VINDO.md √© criado pelo upgrade script
if grep -q "BEM-VINDO.md" "scripts/upgrade-to-epic3.sh"; then
    success "BEM-VINDO.md est√° no script de upgrade"

    if grep -q "Comece Aqui" "scripts/upgrade-to-epic3.sh"; then
        success "Cont√©m se√ß√£o 'Comece Aqui'"
    else
        fail "N√ÉO cont√©m se√ß√£o 'Comece Aqui'"
    fi

    if grep -q "Seus 5 Agentes" "scripts/upgrade-to-epic3.sh"; then
        success "Apresenta os 5 agentes"
    else
        fail "N√ÉO apresenta os 5 agentes"
    fi

    if grep -q "Dica TDAH" "scripts/upgrade-to-epic3.sh"; then
        success "Cont√©m dica TDAH"
    else
        fail "N√ÉO cont√©m dica TDAH"
    fi
else
    fail "BEM-VINDO.md N√ÉO est√° no upgrade script"
fi

# ============================================
# TESTE 3: MEU-PROGRESSO.md com Checklist
# ============================================
info "Teste 3: Verificando MEU-PROGRESSO.md (AC4)..."

if [ -f "MEU-PROGRESSO.md" ]; then
    success "MEU-PROGRESSO.md existe"

    if grep -q "Checklist dos 7 Primeiros Dias" "MEU-PROGRESSO.md"; then
        success "Cont√©m checklist de 7 dias"
    else
        fail "N√ÉO cont√©m checklist de 7 dias"
    fi

    if grep -q "Dia 1:" "MEU-PROGRESSO.md" && grep -q "Dia 7:" "MEU-PROGRESSO.md"; then
        success "Cont√©m todos os 7 dias"
    else
        fail "N√ÉO cont√©m todos os 7 dias"
    fi

    if grep -q "Minhas Estat√≠sticas" "MEU-PROGRESSO.md"; then
        success "Cont√©m se√ß√£o de estat√≠sticas"
    else
        fail "N√ÉO cont√©m se√ß√£o de estat√≠sticas"
    fi

    if grep -q "Pr√≥ximo Passo Sugerido" "MEU-PROGRESSO.md"; then
        success "Cont√©m pr√≥ximo passo sugerido"
    else
        fail "N√ÉO cont√©m pr√≥ximo passo sugerido"
    fi

    if grep -q "Dicas para TDAH" "MEU-PROGRESSO.md"; then
        success "Cont√©m dicas TDAH"
    else
        fail "N√ÉO cont√©m dicas TDAH"
    fi
else
    fail "MEU-PROGRESSO.md N√ÉO encontrado"
fi

# ============================================
# TESTE 4: Output Visual Melhorado
# ============================================
info "Teste 4: Verificando output visual melhorado (AC3)..."

if [ -f ".assistant-core/tasks/processar-despejo.md" ]; then
    success "Task processar-despejo.md existe"

    if grep -q "Output Visual Detalhado" ".assistant-core/tasks/processar-despejo.md"; then
        success "Task inclui output visual detalhado"
    else
        fail "Task N√ÉO inclui output visual detalhado"
    fi

    # Verificar √≠cones por tipo
    if grep -q "üìÖ AGENDA" ".assistant-core/tasks/processar-despejo.md"; then
        success "Inclui √≠cone para AGENDA"
    else
        fail "N√ÉO inclui √≠cone para AGENDA"
    fi

    if grep -q "üöÄ PROJETO" ".assistant-core/tasks/processar-despejo.md"; then
        success "Inclui √≠cone para PROJETO"
    else
        fail "N√ÉO inclui √≠cone para PROJETO"
    fi

    if grep -q "üí° IDEIA" ".assistant-core/tasks/processar-despejo.md"; then
        success "Inclui √≠cone para IDEIA"
    else
        fail "N√ÉO inclui √≠cone para IDEIA"
    fi

    if grep -q "‚úÖ TODO" ".assistant-core/tasks/processar-despejo.md"; then
        success "Inclui √≠cone para TODO"
    else
        fail "N√ÉO inclui √≠cone para TODO"
    fi

    if grep -q "Abra o Obsidian" ".assistant-core/tasks/processar-despejo.md"; then
        success "Instrui usu√°rio a abrir Obsidian"
    else
        fail "N√ÉO instrui usu√°rio a abrir Obsidian"
    fi
else
    fail "Task processar-despejo.md N√ÉO encontrado"
fi

# ============================================
# TESTE 5: Integra√ß√£o com Setup
# ============================================
info "Teste 5: Verificando integra√ß√£o com setup.sh..."

if [ -f "setup.sh" ]; then
    success "setup.sh existe"

    if grep -q "daily-dump.md" "setup.sh" && grep -q "Exemplo de como usar" "setup.sh"; then
        success "setup.sh cria daily-dump.md com exemplos"
    else
        fail "setup.sh N√ÉO cria daily-dump.md adequadamente"
    fi

    if grep -q "MEU-PROGRESSO.md" "setup.sh"; then
        success "setup.sh cria MEU-PROGRESSO.md"
    else
        fail "setup.sh N√ÉO cria MEU-PROGRESSO.md"
    fi
else
    fail "setup.sh N√ÉO encontrado"
fi

# ============================================
# TESTE 6: Integra√ß√£o com Upgrade
# ============================================
info "Teste 6: Verificando integra√ß√£o com upgrade-to-epic3.sh..."

if [ -f "scripts/upgrade-to-epic3.sh" ]; then
    success "upgrade-to-epic3.sh existe"

    if grep -q "BEM-VINDO.md" "scripts/upgrade-to-epic3.sh"; then
        success "upgrade cria BEM-VINDO.md"
    else
        fail "upgrade N√ÉO cria BEM-VINDO.md"
    fi

    if grep -q "MEU-PROGRESSO.md" "scripts/upgrade-to-epic3.sh"; then
        success "upgrade cria MEU-PROGRESSO.md"
    else
        fail "upgrade N√ÉO cria MEU-PROGRESSO.md"
    fi

    if grep -q "Checklist dos 7 Primeiros Dias" "scripts/upgrade-to-epic3.sh"; then
        success "upgrade usa checklist completo"
    else
        fail "upgrade N√ÉO usa checklist completo"
    fi
else
    fail "upgrade-to-epic3.sh N√ÉO encontrado"
fi

# ============================================
# TESTE 7: Tour Guiado (Implementado na Story 3.0)
# ============================================
info "Teste 7: Verificando tour guiado implementado (AC1)..."

if [ -f ".assistant-core/agents/organizador.md" ]; then
    success "Agente organizador existe"

    # Tour foi implementado na Story 3.0 via patches
    if [ -f "scripts/apply-epic3-agent-patches.sh" ]; then
        success "Script de patches existe"

        if grep -q "tour-guiado" "scripts/apply-epic3-agent-patches.sh"; then
            success "Patch de tour guiado definido"
        else
            fail "Patch de tour guiado N√ÉO encontrado"
        fi

        if grep -q "organizador-tour-status.yaml" "scripts/apply-epic3-agent-patches.sh"; then
            success "Arquivo de status do tour criado"
        else
            fail "Arquivo de status do tour N√ÉO criado"
        fi
    else
        warning "Script de patches n√£o encontrado (Story 3.0)"
    fi
else
    fail "Agente organizador N√ÉO encontrado"
fi

# ============================================
# TESTE 8: Documenta√ß√£o em Portugu√™s
# ============================================
info "Teste 8: Verificando documenta√ß√£o em portugu√™s..."

PORTUGUESE_WORDS=("despejo" "progresso" "checklist" "agentes" "organizador")
FOUND_PORTUGUESE=0

for word in "${PORTUGUESE_WORDS[@]}"; do
    if grep -q "$word" "MEU-PROGRESSO.md" 2>/dev/null || grep -q "$word" "despejo/daily-dump.md" 2>/dev/null; then
        ((FOUND_PORTUGUESE++))
    fi
done

if [ $FOUND_PORTUGUESE -ge 3 ]; then
    success "Documenta√ß√£o em portugu√™s confirmada"
else
    fail "Documenta√ß√£o N√ÉO est√° adequadamente em portugu√™s"
fi

# ============================================
# TESTE 9: Quick Wins - Estrutura
# ============================================
info "Teste 9: Verificando estrutura para quick wins (AC3)..."

# Verificar que exemplos s√£o pr√°ticos e r√°pidos
if [ -f "despejo/daily-dump.md" ]; then
    EXAMPLE_COUNT=$(grep -c "^\w" "despejo/daily-dump.md" 2>/dev/null || echo "0")

    if [ "$EXAMPLE_COUNT" -ge 5 ]; then
        success "Exemplos suficientes para quick wins (>= 5)"
    else
        warning "Poucos exemplos (< 5), pode n√£o ser suficiente para quick wins"
    fi
fi

# Verificar que o output visual est√° otimizado
if grep -q "Processamento Completo" ".assistant-core/tasks/processar-despejo.md" 2>/dev/null; then
    success "Mensagem de sucesso imediato configurada"
else
    fail "Mensagem de sucesso imediato N√ÉO configurada"
fi

# ============================================
# TESTE 10: Compatibilidade Epic 2
# ============================================
info "Teste 10: Verificando compatibilidade com Epic 2..."

# Verificar que agentes Epic 2 n√£o foram modificados
AGENTS_EXIST=true
for agent in organizador secretaria arquiteto psicologo mentor; do
    if [ ! -f ".assistant-core/agents/${agent}.md" ]; then
        AGENTS_EXIST=false
        break
    fi
done

if [ "$AGENTS_EXIST" = true ]; then
    success "Todos os 5 agentes Epic 2 existem"
else
    warning "Nem todos agentes encontrados (esperado em ambiente de teste)"
fi

# Verificar que estrutura knowledge-base est√° intacta
if [ -d "knowledge-base" ]; then
    success "knowledge-base/ preservada"
else
    warning "knowledge-base/ N√ÉO encontrada (esperado em ambiente de teste)"
fi

# ============================================
# RESULTADO FINAL
# ============================================
echo ""
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo "  RESULTADO DOS TESTES"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo ""
echo -e "‚úÖ Testes APROVADOS: ${GREEN}${TESTS_PASSED}${NC}"
echo -e "‚ùå Testes FALHADOS:  ${RED}${TESTS_FAILED}${NC}"
echo ""

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${GREEN}  ‚úÖ STORY 3.1 - TODOS OS TESTES PASSARAM!${NC}"
    echo -e "${GREEN}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo ""
    echo "Pr√≥ximos passos:"
    echo "  1. Testar fluxo completo de onboarding com usu√°rio real"
    echo "  2. Validar quick wins < 5 minutos"
    echo "  3. Coletar feedback sobre clareza do tour"
    echo "  4. Verificar que exemplos s√£o √∫teis"
    exit 0
else
    echo -e "${RED}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    echo -e "${RED}  ‚ùå ALGUNS TESTES FALHARAM - CORRIJA ANTES DE CONTINUAR${NC}"
    echo -e "${RED}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
    exit 1
fi
