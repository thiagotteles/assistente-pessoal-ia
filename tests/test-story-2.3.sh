#!/bin/bash
# Test script espec√≠fico para Story 2.3: Agente Arquiteto Confrontador Completo (M√©todo Conversacional)

echo "üß™ Testing Story 2.3: Agente Arquiteto Confrontador Completo (M√©todo Conversacional)"
echo "====================================================================================="

EXIT_CODE=0

# Test 1: Defini√ß√£o do Agente Conversacional Arquiteto
echo "ü§ñ Test 1: Defini√ß√£o do Agente Arquiteto Marcus..."

agent_file=".assistant-core/agents/arquiteto.md"

if [ -f "$agent_file" ]; then
    echo "   ‚úÖ Agent file: arquiteto.md exists"

    # Check for conversational agent structure
    if grep -q "agent:" "$agent_file" && grep -q "persona:" "$agent_file"; then
        echo "   ‚úÖ Estrutura conversacional: Se√ß√µes agent e persona presentes"
    else
        echo "   ‚ùå Estrutura conversacional: Estrutura YAML agent/persona ausente"
        EXIT_CODE=1
    fi

    # Check for Marcus personality and confrontador characteristics
    if grep -q "Marcus" "$agent_file" && grep -q "confrontador\|Confrontador" "$agent_file"; then
        echo "   ‚úÖ Agent identity: Marcus with confrontador characteristics defined"
    else
        echo "   ‚ùå Agent identity: Missing Marcus/confrontador specialization"
        EXIT_CODE=1
    fi

    # Check for conversational commands
    if grep -q "commands:" "$agent_file" && grep -q "\*analise\|\*consultoria\|\*confronto\|\*decisao" "$agent_file"; then
        echo "   ‚úÖ Commands: Conversational commands defined (analise, consultoria, confronto, decisao)"
    else
        echo "   ‚ùå Commands: Missing required conversational commands"
        EXIT_CODE=1
    fi

    # Check for technical/architectural focus
    if grep -q "arquitetura\|arquitetural\|t√©cnico\|decis√µes t√©cnicas" "$agent_file"; then
        echo "   ‚úÖ Technical focus: Architectural and technical focus defined"
    else
        echo "   ‚ùå Technical focus: Missing architectural focus"
        EXIT_CODE=1
    fi

else
    echo "   ‚ùå Agent file: arquiteto.md not found"
    EXIT_CODE=1
fi

# Test 2: Conversational Workflows (Tasks) do Arquiteto
echo ""
echo "üìã Test 2: Workflows conversacionais (Tasks)..."

required_tasks=(
    ".assistant-core/tasks/consultoria-tecnica.md"
    ".assistant-core/tasks/analise-projeto.md"
    ".assistant-core/tasks/confronto-tecnico.md"
    ".assistant-core/tasks/registrar-decisao.md"
    ".assistant-core/tasks/historico-decisoes.md"
)

for task_file in "${required_tasks[@]}"; do
    if [ -f "$task_file" ]; then
        task_name=$(basename "$task_file" .md)
        echo "   ‚úÖ Task: $task_name exists"

        # Check for YAML configuration
        if grep -q "elicit:\|language:\|interaction_style:" "$task_file"; then
            echo "   ‚úÖ Configuration: YAML config present in $task_name"
        else
            echo "   ‚ùå Configuration: Missing YAML config in $task_name"
            EXIT_CODE=1
        fi

        # Check for conversational structure
        if grep -q "Workflow\|Processo\|Etapa\|Execu√ß√£o" "$task_file"; then
            echo "   ‚úÖ Structure: Conversational workflow in $task_name"
        else
            echo "   ‚ùå Structure: Missing conversational structure in $task_name"
            EXIT_CODE=1
        fi

        # Task-specific validations
        case "$task_name" in
            "consultoria-tecnica")
                if grep -q "mem√≥ria contextual\|contexto hist√≥rico\|decis√µes anteriores" "$task_file"; then
                    echo "   ‚úÖ Context: Memory-based consultancy in $task_name"
                else
                    echo "   ‚ùå Context: Missing historical context reference"
                    EXIT_CODE=1
                fi
                ;;
            "confronto-tecnico")
                if grep -q "Por que n√£o\|E se\|construtivo" "$task_file"; then
                    echo "   ‚úÖ Questioning: Confrontational questioning patterns in $task_name"
                else
                    echo "   ‚ùå Questioning: Missing confrontational patterns"
                    EXIT_CODE=1
                fi
                ;;
            "registrar-decisao")
                if grep -q "cross-referencing\|\\[\\[" "$task_file"; then
                    echo "   ‚úÖ Cross-ref: Cross-referencing logic in $task_name"
                else
                    echo "   ‚ùå Cross-ref: Missing cross-referencing"
                    EXIT_CODE=1
                fi
                ;;
        esac

    else
        echo "   ‚ùå Task: $task_file missing"
        EXIT_CODE=1
    fi
done

# Test 3: Agent Memory System do Arquiteto
echo ""
echo "üß† Test 3: Sistema de mem√≥ria contextual profunda..."

memory_file=".assistant-core/memory/arquiteto-memory.yaml"

if [ -f "$memory_file" ]; then
    echo "   ‚úÖ Memory file: arquiteto-memory.yaml exists"

    # Check for agent identity
    if grep -q "agent_identity:" "$memory_file" && grep -q "Marcus" "$memory_file"; then
        echo "   ‚úÖ Identity: Agent Marcus identity in memory"
    else
        echo "   ‚ùå Identity: Missing agent identity in memory"
        EXIT_CODE=1
    fi

    # Check for architectural patterns tracking
    if grep -q "preferencias_arquiteturais\|decisoes_recorrentes\|padroes_evitados" "$memory_file"; then
        echo "   ‚úÖ Architectural patterns: Pattern tracking present"
    else
        echo "   ‚ùå Architectural patterns: Missing pattern tracking"
        EXIT_CODE=1
    fi

    # Check for interaction history with technical context
    if grep -q "interaction_history:\|total_consultorias\|total_confrontos\|total_decisoes" "$memory_file"; then
        echo "   ‚úÖ Technical history: Technical interaction tracking present"
    else
        echo "   ‚ùå Technical history: Missing technical interaction tracking"
        EXIT_CODE=1
    fi

    # Check for cross-agent context
    if grep -q "cross_agent_context:\|mentor:\|secretaria:" "$memory_file"; then
        echo "   ‚úÖ Cross-agent: Collaboration context with other agents present"
    else
        echo "   ‚ùå Cross-agent: Missing cross-agent collaboration context"
        EXIT_CODE=1
    fi

else
    echo "   ‚ùå Memory file: arquiteto-memory.yaml not found"
    EXIT_CODE=1
fi

# Test 4: Template de Decis√£o T√©cnica
echo ""
echo "üìÑ Test 4: Template de decis√£o t√©cnica..."

template_file=".assistant-core/templates/decisao-tecnica.yaml"

if [ -f "$template_file" ]; then
    echo "   ‚úÖ Template: decisao-tecnica.yaml exists"

    # Check for technical decision sections
    if grep -q "rationale\|consequences\|options" "$template_file"; then
        echo "   ‚úÖ Decision sections: Rationale, consequences, options present"
    else
        echo "   ‚ùå Decision sections: Missing critical decision sections"
        EXIT_CODE=1
    fi

    # Check for auto-linking
    if grep -q "auto_link_people\|auto_link_projects\|auto_link_technologies" "$template_file"; then
        echo "   ‚úÖ Auto-linking: Cross-referencing automation configured"
    else
        echo "   ‚ùå Auto-linking: Missing auto-linking configuration"
        EXIT_CODE=1
    fi

else
    echo "   ‚ùå Template: decisao-tecnica.yaml not found"
    EXIT_CODE=1
fi

# Test 5: Integration with Knowledge-Base (Unique Files Structure)
echo ""
echo "üóÑÔ∏è  Test 5: Integra√ß√£o com estrutura de arquivos √∫nicos..."

# Check if knowledge-base structure supports decisoes/
if [ -d "knowledge-base/decisoes" ]; then
    echo "   ‚úÖ KB Structure: knowledge-base/decisoes/ directory exists"
else
    echo "   ‚ö†Ô∏è  KB Structure: knowledge-base/decisoes/ directory missing (will be created on first use)"
fi

# Check for cross-referencing with projetos/
if [ -d "knowledge-base/projetos" ]; then
    echo "   ‚úÖ KB Integration: knowledge-base/projetos/ available for cross-referencing"
else
    echo "   ‚ùå KB Integration: knowledge-base/projetos/ missing (required for integration)"
    EXIT_CODE=1
fi

# Check for cross-referencing with pessoas/
if [ -d "knowledge-base/pessoas" ]; then
    echo "   ‚úÖ KB Integration: knowledge-base/pessoas/ available for cross-referencing"
else
    echo "   ‚ùå KB Integration: knowledge-base/pessoas/ missing (required for integration)"
    EXIT_CODE=1
fi

# Test 6: Compatibility with Previous Stories (2.1 Organizador, 2.2 Secret√°ria)
echo ""
echo "üîó Test 6: Compatibilidade com stories anteriores..."

# Check if Organizador exists (Story 2.1)
if [ -f ".assistant-core/agents/organizador.md" ]; then
    echo "   ‚úÖ Story 2.1: Organizador agent exists (compatibility OK)"
else
    echo "   ‚ùå Story 2.1: Missing Organizador agent (dependency)"
    EXIT_CODE=1
fi

# Check if Secret√°ria exists (Story 2.2)
if [ -f ".assistant-core/agents/secretaria.md" ]; then
    echo "   ‚úÖ Story 2.2: Secret√°ria agent exists (compatibility OK)"
else
    echo "   ‚ùå Story 2.2: Missing Secret√°ria agent (dependency)"
    EXIT_CODE=1
fi

# Test 7: Confrontational and Questioning Patterns
echo ""
echo "‚ùì Test 7: Padr√µes de confronto construtivo e questionamento..."

# Check confronto-tecnico for questioning patterns
confronto_file=".assistant-core/tasks/confronto-tecnico.md"
if [ -f "$confronto_file" ]; then
    # Check for "Por que n√£o" patterns
    if grep -q "Por que n√£o\|Por que voc√™" "$confronto_file"; then
        echo "   ‚úÖ Questioning: 'Por que n√£o X?' pattern present"
    else
        echo "   ‚ùå Questioning: Missing 'Por que n√£o' questioning pattern"
        EXIT_CODE=1
    fi

    # Check for "E se" patterns
    if grep -q "E se\|e se.*acontecer" "$confronto_file"; then
        echo "   ‚úÖ Scenarios: 'E se...?' scenario exploration present"
    else
        echo "   ‚ùå Scenarios: Missing 'E se' scenario patterns"
        EXIT_CODE=1
    fi

    # Check for historical context requirement
    if grep -q "OBRIGAT√ìRIO.*hist√≥rico\|CR√çTICO.*contexto hist√≥rico" "$confronto_file"; then
        echo "   ‚úÖ Historical: Mandatory historical context validation present"
    else
        echo "   ‚ùå Historical: Missing mandatory historical context requirement"
        EXIT_CODE=1
    fi
else
    echo "   ‚ùå File: confronto-tecnico.md missing"
    EXIT_CODE=1
fi

# Test 8: No BMAD References (Validation per IMPORTANTE-LEIA-PRIMEIRO.md)
echo ""
echo "üö´ Test 8: Valida√ß√£o de aus√™ncia de refer√™ncias ao BMAD..."

# Check agent file for BMAD references
if grep -i "bmad\|.bmad-core" "$agent_file" 2>/dev/null; then
    echo "   ‚ùå BMAD reference: Found BMAD references in $agent_file (PROHIBITED)"
    EXIT_CODE=1
else
    echo "   ‚úÖ BMAD reference: No BMAD references in agent file"
fi

# Check tasks for BMAD references
bmad_found=0
for task_file in "${required_tasks[@]}"; do
    if [ -f "$task_file" ] && grep -i "bmad\|.bmad-core" "$task_file" 2>/dev/null; then
        echo "   ‚ùå BMAD reference: Found BMAD references in $task_file (PROHIBITED)"
        bmad_found=1
    fi
done

if [ $bmad_found -eq 0 ]; then
    echo "   ‚úÖ BMAD reference: No BMAD references in task files"
else
    EXIT_CODE=1
fi

# Test 9: Cross-Agent Intelligence Implementation
echo ""
echo "ü§ù Test 9: Implementa√ß√£o de Cross-Agent Intelligence..."

# Check for Mentor collaboration mentions
if grep -q "mentor\|Mentor.*carreira\|alinhamento.*carreira" "$agent_file"; then
    echo "   ‚úÖ Mentor collaboration: Mentor agent collaboration defined"
else
    echo "   ‚ùå Mentor collaboration: Missing Mentor collaboration"
    EXIT_CODE=1
fi

# Check for Secret√°ria collaboration mentions
if grep -q "secretaria\|Secret√°ria.*deadlines\|projetos_tecnicos" "$agent_file" || grep -q "secretaria" "$memory_file"; then
    echo "   ‚úÖ Secret√°ria collaboration: Secret√°ria agent collaboration defined"
else
    echo "   ‚ùå Secret√°ria collaboration: Missing Secret√°ria collaboration"
    EXIT_CODE=1
fi

# Test 10: Validation of All Acceptance Criteria
echo ""
echo "‚úÖ Test 10: Valida√ß√£o de todos os crit√©rios de aceita√ß√£o..."

ac_count=0

# AC1: Consultoria T√©cnica com Mem√≥ria Contextual Profunda
if [ -f ".assistant-core/tasks/consultoria-tecnica.md" ] && grep -q "contexto hist√≥rico\|mem√≥ria" ".assistant-core/tasks/consultoria-tecnica.md"; then
    echo "   ‚úÖ AC1: Consultoria t√©cnica com mem√≥ria contextual implementada"
    ((ac_count++))
else
    echo "   ‚ùå AC1: Consultoria t√©cnica com mem√≥ria contextual FALHOU"
    EXIT_CODE=1
fi

# AC2: An√°lise Cr√≠tica de Projetos via URLs/Reposit√≥rios
if [ -f ".assistant-core/tasks/analise-projeto.md" ] && grep -q "URL\|reposit√≥rio\|c√≥digo" ".assistant-core/tasks/analise-projeto.md"; then
    echo "   ‚úÖ AC2: An√°lise cr√≠tica de projetos e c√≥digo implementada"
    ((ac_count++))
else
    echo "   ‚ùå AC2: An√°lise cr√≠tica de projetos FALHOU"
    EXIT_CODE=1
fi

# AC3: Discuss√£o T√©cnica Especializada sobre Padr√µes
if [ -f ".assistant-core/tasks/consultoria-tecnica.md" ] && grep -q "padr√µes\|trade-offs\|alternativas" ".assistant-core/tasks/consultoria-tecnica.md"; then
    echo "   ‚úÖ AC3: Discuss√£o t√©cnica especializada implementada"
    ((ac_count++))
else
    echo "   ‚ùå AC3: Discuss√£o t√©cnica especializada FALHOU"
    EXIT_CODE=1
fi

# AC4: Integra√ß√£o com Knowledge-Base T√©cnica
if [ -f ".assistant-core/tasks/registrar-decisao.md" ] && grep -q "knowledge-base\|\\[\\[.*\\]\\]" ".assistant-core/tasks/registrar-decisao.md"; then
    echo "   ‚úÖ AC4: Integra√ß√£o com knowledge-base t√©cnica implementada"
    ((ac_count++))
else
    echo "   ‚ùå AC4: Integra√ß√£o com knowledge-base FALHOU"
    EXIT_CODE=1
fi

# AC5: An√°lise de C√≥digo e Questionamento Ativo
if [ -f ".assistant-core/tasks/analise-projeto.md" ] && grep -q "Por que\|E se" ".assistant-core/tasks/analise-projeto.md"; then
    echo "   ‚úÖ AC5: An√°lise de c√≥digo com questionamento ativo implementada"
    ((ac_count++))
else
    echo "   ‚ùå AC5: An√°lise de c√≥digo com questionamento FALHOU"
    EXIT_CODE=1
fi

# AC6: Tracking Cont√≠nuo de Decis√µes
if [ -f ".assistant-core/tasks/historico-decisoes.md" ]; then
    echo "   ‚úÖ AC6: Tracking cont√≠nuo de decis√µes implementado"
    ((ac_count++))
else
    echo "   ‚ùå AC6: Tracking cont√≠nuo de decis√µes FALHOU"
    EXIT_CODE=1
fi

echo ""
echo "   üìä Acceptance Criteria Score: $ac_count/6"

if [ $ac_count -eq 6 ]; then
    echo "   ‚úÖ All acceptance criteria met!"
else
    echo "   ‚ùå Some acceptance criteria failed"
    EXIT_CODE=1
fi

# Final Summary
echo ""
echo "========================================================="
if [ $EXIT_CODE -eq 0 ]; then
    echo "‚úÖ All tests PASSED - Story 2.3 implementation complete!"
else
    echo "‚ùå Some tests FAILED - Review implementation"
fi
echo "========================================================="

exit $EXIT_CODE